{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Work\\\\Office\\\\ChatGPT Projects\\\\Voice Recognizer\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst mic = new SpeechRecognition();\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = 'en-US';\n\nfunction App() {\n  const [isListening, setIsListening] = useState(false);\n  const [note, setNote] = useState(\" \");\n  const [savedNote, setSavedNote] = useState(\"\");\n  const [buttonText, setButtonText] = useState(\"Start Recording\");\n  const {\n    speak,\n    cancel\n  } = useSpeechSynthesis();\n\n  const handleListen = async () => {\n    if (isListening) {\n      mic.start();\n\n      mic.onend = () => {\n        mic.start();\n      };\n\n      setButtonText(\"Stop Recording\");\n      setSavedNote(\"Processing...\");\n      cancel();\n    } else {\n      mic.stop();\n\n      mic.onend = () => {};\n\n      setButtonText(\"Start Recording\");\n      await handleSaveNote();\n    }\n\n    mic.onstart = () => {};\n\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n      console.log(transcript);\n      setNote(transcript);\n\n      mic.onerror = event => {\n        console.log(event.error);\n      };\n    };\n  }; // async function askQuestion(prompt)\n  // {\n  //   // Call Backend OpenAI Apis for completion \n  //   var responseAns=\"\";\n  //   await axios.post('http://localhost:8080/completion',{\n  //     prompt:prompt\n  //   })\n  //   .then(async (response)=>{\n  //     if(response.status==200){\n  //       const parsedData = await response.data.bot\n  //       // console.log(parsedData)\n  //       responseAns= parsedData;\n  //       return responseAns\n  //       }\n  //       else{\n  //       responseAns= \"Error: API call failed. Try again..\"\n  //       return responseAns\n  //       }\n  //   })\n  //   return \"\"\n  // }\n\n\n  async function askQuestion(prompt) {\n    const response = await fetch('http://localhost:8080/completion', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: prompt\n      })\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      const parsedData = data.bot;\n      console.log(parsedData);\n      return parsedData;\n    } else return \"Error: API call failed. Try again..\";\n  }\n\n  const handleSaveNote = async () => {\n    // Call OpenAI Apis using note\n    const res = await askQuestion(note);\n    setSavedNote(res.split('\\n').map(str => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 45\n      }\n    }, str)));\n    speak({\n      text: res\n    });\n    setNote('');\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Speech to text GPT-3 enabled\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Input\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: async () => {\n      setIsListening(prevState => !prevState);\n      await handleListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, buttonText), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, note)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Response from GPT-3\"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, savedNote)))));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/My Work/Office/ChatGPT Projects/Voice Recognizer/src/App.js"],"names":["React","useState","useEffect","axios","Card","useSpeechSynthesis","SpeechRecognition","window","webkitSpeechRecognition","mic","continuous","interimResults","lang","App","isListening","setIsListening","note","setNote","savedNote","setSavedNote","buttonText","setButtonText","speak","cancel","handleListen","start","onend","stop","handleSaveNote","onstart","onresult","event","transcript","Array","from","results","map","result","join","console","log","onerror","error","askQuestion","prompt","response","fetch","method","headers","body","JSON","stringify","ok","data","json","parsedData","bot","res","split","str","text","prevState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport axios from 'axios'\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\nfunction App() {\r\n  const [isListening, setIsListening] = useState(false)\r\n  const [note, setNote] = useState(\" \")\r\n  const [savedNote, setSavedNote] = useState(\"\")\r\n  const[buttonText,setButtonText]=useState(\"Start Recording\")\r\n  const { speak,cancel } = useSpeechSynthesis();\r\n\r\n\r\n  const handleListen = async() => {\r\n    if (isListening) {\r\n      mic.start()\r\n      mic.onend = () => {\r\n        mic.start()\r\n      }\r\n      setButtonText(\"Stop Recording\")\r\n      setSavedNote(\"Processing...\")\r\n      cancel()\r\n    } else {\r\n      mic.stop()\r\n      mic.onend = () => {\r\n\r\n      }\r\n      setButtonText(\"Start Recording\")\r\n      await handleSaveNote()\r\n    }\r\n    mic.onstart = () => {\r\n    }\r\n\r\n    mic.onresult = event => {\r\n      const transcript = Array.from(event.results)\r\n        .map(result => result[0])\r\n        .map(result => result.transcript)\r\n        .join('')\r\n      console.log(transcript)\r\n      setNote(transcript)\r\n      mic.onerror = event => {\r\n        console.log(event.error)\r\n      }\r\n    }\r\n  }\r\n  // async function askQuestion(prompt)\r\n  // {\r\n  //   // Call Backend OpenAI Apis for completion \r\n  //   var responseAns=\"\";\r\n  //   await axios.post('http://localhost:8080/completion',{\r\n  //     prompt:prompt\r\n  //   })\r\n  //   .then(async (response)=>{\r\n  //     if(response.status==200){\r\n  //       const parsedData = await response.data.bot\r\n  //       // console.log(parsedData)\r\n  //       responseAns= parsedData;\r\n  //       return responseAns\r\n  //       }\r\n  //       else{\r\n  //       responseAns= \"Error: API call failed. Try again..\"\r\n  //       return responseAns\r\n  //       }\r\n  //   })\r\n  //   return \"\"\r\n  // }\r\n  async function askQuestion(prompt){\r\n  const response = await fetch('http://localhost:8080/completion', {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n        prompt: prompt\r\n    })\r\n})\r\nif(response.ok){\r\nconst data = await response.json();\r\nconst parsedData = data.bot\r\nconsole.log(parsedData)\r\nreturn parsedData;\r\n}\r\nelse\r\nreturn \"Error: API call failed. Try again..\"\r\n}\r\n  const handleSaveNote = async() => {\r\n    // Call OpenAI Apis using note\r\n    const res=await askQuestion(note)\r\n    setSavedNote(res.split('\\n').map(str => <p>{str}</p>));\r\n    speak({ text: res })\r\n    setNote('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Speech to text GPT-3 enabled</h1>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <h2>Input</h2>\r\n          <button onClick={async () => {\r\n            setIsListening(prevState => !prevState)\r\n           await handleListen()\r\n          }}>\r\n            {buttonText}\r\n          </button>\r\n          <p>{note}</p>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>Response from GPT-3</h2>\r\n          <Card>\r\n      <Card.Body>\r\n        {savedNote}\r\n      </Card.Body>\r\n    </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}