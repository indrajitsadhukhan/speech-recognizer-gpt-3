{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\My Work\\\\Office\\\\ChatGPT Projects\\\\Voice Recognizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\My Work\\\\Office\\\\ChatGPT Projects\\\\Voice Recognizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:\\\\My Work\\\\Office\\\\ChatGPT Projects\\\\Voice Recognizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'./App.css';import axios from'axios';import Card from'react-bootstrap/Card';import{useSpeechSynthesis}from\"react-speech-kit\";var SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;var mic=new SpeechRecognition();mic.continuous=true;mic.interimResults=true;mic.lang='en-US';function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isListening=_useState2[0],setIsListening=_useState2[1];var _useState3=useState(\" \"),_useState4=_slicedToArray(_useState3,2),note=_useState4[0],setNote=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),savedNote=_useState6[0],setSavedNote=_useState6[1];var _useState7=useState(\"Start Recording\"),_useState8=_slicedToArray(_useState7,2),buttonText=_useState8[0],setButtonText=_useState8[1];var _useSpeechSynthesis=useSpeechSynthesis(),speak=_useSpeechSynthesis.speak,cancel=_useSpeechSynthesis.cancel;var handleListen=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!isListening){_context.next=8;break;}mic.start();mic.onend=function(){mic.start();};setButtonText(\"Stop Recording\");setSavedNote(\"Processing...\");cancel();_context.next=13;break;case 8:mic.stop();mic.onend=function(){};setButtonText(\"Start Recording\");_context.next=13;return handleSaveNote();case 13:mic.onstart=function(){};mic.onresult=function(event){var transcript=Array.from(event.results).map(function(result){return result[0];}).map(function(result){return result.transcript;}).join('');console.log(transcript);setNote(transcript);mic.onerror=function(event){console.log(event.error);};};case 15:case\"end\":return _context.stop();}}},_callee);}));return function handleListen(){return _ref.apply(this,arguments);};}();// async function askQuestion(prompt)\n// {\n//   // Call Backend OpenAI Apis for completion \n//   var responseAns=\"\";\n//   await axios.post('http://localhost:8080/completion',{\n//     prompt:prompt\n//   })\n//   .then(async (response)=>{\n//     if(response.status==200){\n//       const parsedData = await response.data.bot\n//       // console.log(parsedData)\n//       responseAns= parsedData;\n//       return responseAns\n//       }\n//       else{\n//       responseAns= \"Error: API call failed. Try again..\"\n//       return responseAns\n//       }\n//   })\n//   return \"\"\n// }\nfunction askQuestion(_x){return _askQuestion.apply(this,arguments);}function _askQuestion(){_askQuestion=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(prompt){var response,data,parsedData;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetch('http://localhost:8080/completion',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt:prompt})});case 2:response=_context4.sent;if(!response.ok){_context4.next=12;break;}_context4.next=6;return response.json();case 6:data=_context4.sent;parsedData=data.bot;console.log(parsedData);return _context4.abrupt(\"return\",parsedData);case 12:return _context4.abrupt(\"return\",\"Error: API call failed. Try again..\");case 13:case\"end\":return _context4.stop();}}},_callee4);}));return _askQuestion.apply(this,arguments);}var handleSaveNote=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return askQuestion(note);case 2:res=_context2.sent;setSavedNote(res.split('\\n').map(function(str){return/*#__PURE__*/React.createElement(\"p\",null,str);}));speak({text:res});setNote('');case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSaveNote(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h1\",null,\"Speech to text GPT-3 enabled\"),/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"box\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Input\"),/*#__PURE__*/React.createElement(\"button\",{onClick:/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:setIsListening(function(prevState){return!prevState;});_context3.next=3;return handleListen();case 3:case\"end\":return _context3.stop();}}},_callee3);}))},buttonText),/*#__PURE__*/React.createElement(\"p\",null,note)),/*#__PURE__*/React.createElement(\"div\",{className:\"box\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Response from GPT-3\"),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Body,null,savedNote)))));}export default App;","map":{"version":3,"sources":["D:/My Work/Office/ChatGPT Projects/Voice Recognizer/src/App.js"],"names":["React","useState","useEffect","axios","Card","useSpeechSynthesis","SpeechRecognition","window","webkitSpeechRecognition","mic","continuous","interimResults","lang","App","isListening","setIsListening","note","setNote","savedNote","setSavedNote","buttonText","setButtonText","speak","cancel","handleListen","start","onend","stop","handleSaveNote","onstart","onresult","event","transcript","Array","from","results","map","result","join","console","log","onerror","error","askQuestion","prompt","fetch","method","headers","body","JSON","stringify","response","ok","json","data","parsedData","bot","res","split","str","text","prevState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport axios from 'axios'\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\nfunction App() {\r\n  const [isListening, setIsListening] = useState(false)\r\n  const [note, setNote] = useState(\" \")\r\n  const [savedNote, setSavedNote] = useState(\"\")\r\n  const[buttonText,setButtonText]=useState(\"Start Recording\")\r\n  const { speak,cancel } = useSpeechSynthesis();\r\n\r\n\r\n  const handleListen = async() => {\r\n    if (isListening) {\r\n      mic.start()\r\n      mic.onend = () => {\r\n        mic.start()\r\n      }\r\n      setButtonText(\"Stop Recording\")\r\n      setSavedNote(\"Processing...\")\r\n      cancel()\r\n    } else {\r\n      mic.stop()\r\n      mic.onend = () => {\r\n\r\n      }\r\n      setButtonText(\"Start Recording\")\r\n      await handleSaveNote()\r\n    }\r\n    mic.onstart = () => {\r\n    }\r\n\r\n    mic.onresult = event => {\r\n      const transcript = Array.from(event.results)\r\n        .map(result => result[0])\r\n        .map(result => result.transcript)\r\n        .join('')\r\n      console.log(transcript)\r\n      setNote(transcript)\r\n      mic.onerror = event => {\r\n        console.log(event.error)\r\n      }\r\n    }\r\n  }\r\n  // async function askQuestion(prompt)\r\n  // {\r\n  //   // Call Backend OpenAI Apis for completion \r\n  //   var responseAns=\"\";\r\n  //   await axios.post('http://localhost:8080/completion',{\r\n  //     prompt:prompt\r\n  //   })\r\n  //   .then(async (response)=>{\r\n  //     if(response.status==200){\r\n  //       const parsedData = await response.data.bot\r\n  //       // console.log(parsedData)\r\n  //       responseAns= parsedData;\r\n  //       return responseAns\r\n  //       }\r\n  //       else{\r\n  //       responseAns= \"Error: API call failed. Try again..\"\r\n  //       return responseAns\r\n  //       }\r\n  //   })\r\n  //   return \"\"\r\n  // }\r\n  async function askQuestion(prompt){\r\n  const response = await fetch('http://localhost:8080/completion', {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n        prompt: prompt\r\n    })\r\n})\r\nif(response.ok){\r\nconst data = await response.json();\r\nconst parsedData = data.bot\r\nconsole.log(parsedData)\r\nreturn parsedData;\r\n}\r\nelse\r\nreturn \"Error: API call failed. Try again..\"\r\n}\r\n  const handleSaveNote = async() => {\r\n    // Call OpenAI Apis using note\r\n    const res=await askQuestion(note)\r\n    setSavedNote(res.split('\\n').map(str => <p>{str}</p>));\r\n    speak({ text: res })\r\n    setNote('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Speech to text GPT-3 enabled</h1>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <h2>Input</h2>\r\n          <button onClick={async () => {\r\n            setIsListening(prevState => !prevState)\r\n           await handleListen()\r\n          }}>\r\n            {buttonText}\r\n          </button>\r\n          <p>{note}</p>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>Response from GPT-3</h2>\r\n          <Card>\r\n      <Card.Body>\r\n        {savedNote}\r\n      </Card.Body>\r\n    </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}