{"version":3,"sources":["asset/micBtn.svg","asset/speak.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","savedNote","setSavedNote","useSpeechSynthesis","speak","cancel","handleListen","listenStatus","a","start","onend","stop","handleSaveNote","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","console","log","error","askQuestion","prompt","fetch","method","headers","body","JSON","stringify","catch","err","response","ok","json","data","parsedData","bot","res","split","str","text","className","style","fontSize","width","marginBottom","onClick","src","Speak","background","height","alt","Mic","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.53605d50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/micBtn.c01661c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/speak.a7c65d20.jpg\";","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\nimport Mic from \"./asset/micBtn.svg\";\r\nimport Speak from \"./asset/speak.jpg\";\r\n\r\nconst BASE_URL =\r\n  \"https://main--visionary-youtiao-038df7.netlify.app/.netlify/functions/api\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst mic = new SpeechRecognition();\r\n\r\nmic.continuous = true;\r\nmic.interimResults = true;\r\nmic.lang = \"en-US\";\r\n\r\nfunction App() {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [note, setNote] = useState(\" \");\r\n  const [savedNote, setSavedNote] = useState(\"\");\r\n  const { speak, cancel } = useSpeechSynthesis();\r\n\r\n  const handleListen = async (listenStatus) => {\r\n    if (listenStatus) {\r\n      setNote(\"\");\r\n      mic.start();\r\n      mic.onend = () => {\r\n        mic.start();\r\n      };\r\n      setSavedNote(\"Listening to your input...\");\r\n      cancel();\r\n    } else {\r\n      mic.stop();\r\n      mic.onend = () => {};\r\n      await handleSaveNote();\r\n    }\r\n\r\n    mic.onstart = () => {};\r\n    mic.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0])\r\n        .map((result) => result.transcript)\r\n        .join(\"\");\r\n      setNote(transcript);\r\n      mic.onerror = (event) => {\r\n        console.log(event.error);\r\n        setNote(\"\");\r\n      };\r\n    };\r\n  };\r\n\r\n  async function askQuestion(prompt) {\r\n    const response = await fetch(BASE_URL + \"/completion\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        prompt: prompt,\r\n      }),\r\n    }).catch((err) => console.log(err));\r\n    if (response?.ok) {\r\n      const data = await response.json();\r\n      const parsedData = data.bot;\r\n      return parsedData;\r\n    } else return \"I am sorry, could you say that again please\";\r\n  }\r\n\r\n  const handleSaveNote = async () => {\r\n    // Call OpenAI Apis using note\r\n    setSavedNote(\"Processing your input...\");\r\n    const res = await askQuestion(note);\r\n    setSavedNote(res.split(\"\\n\").map((str) => <p>{str}</p>));\r\n    speak({ text: res });\r\n  };\r\n\r\n  const HandleSpeak = () => {\r\n    setIsListening(!isListening);\r\n    handleListen(!isListening);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-div\">\r\n      <header>\r\n        <h1 style={{ fontSize: 30 }}>Assistant on the Go</h1>\r\n        <p>(Enabled with GPT)</p>\r\n      </header>\r\n\r\n      <section className=\"holder-section\">\r\n        <h2>Your transcript</h2>\r\n        <div className=\"text-holder\">\r\n          <p>{note}</p>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"holder-section\">\r\n        <h2>Response</h2>\r\n        <div className=\"text-holder\">\r\n          <p>{savedNote}</p>\r\n        </div>\r\n      </section>\r\n\r\n      <footer className=\"bg-blur\">\r\n        <div className=\"tooltip info\">\r\n          ?\r\n          <span className=\"tooltiptext\" style={{ width: 300 }}>\r\n            Allow microphone to use this app. <br />\r\n            {`Settings -> All Apps -> Permission -> Enable Microphone`}\r\n          </span>\r\n        </div>\r\n        {/* <p style={{ marginBottom: 20 }}>Tap the Microphone</p> */}\r\n        <p style={{ marginBottom: 20 }}>\r\n          {isListening ? (\r\n            <>Speak & tap the Microphone...</>\r\n          ) : (\r\n            <>Tap the Microphone...</>\r\n          )}\r\n        </p>\r\n        <button className=\"mic-btn\" onClick={HandleSpeak}>\r\n          {isListening ? (\r\n            <img\r\n              src={Speak}\r\n              style={{ background: `no-repeat center`, height: 90 }}\r\n              alt=\"oo\"\r\n            />\r\n          ) : (\r\n            <img\r\n              src={Mic}\r\n              style={{ background: `no-repeat center` }}\r\n              alt=\"oo\"\r\n            />\r\n          )}\r\n        </button>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}