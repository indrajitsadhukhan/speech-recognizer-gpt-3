{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","savedNote","setSavedNote","buttonText","setButtonText","useSpeechSynthesis","speak","cancel","handleListen","a","start","onend","stop","handleSaveNote","onstart","onresult","event","transcript","Array","from","results","map","result","join","console","log","onerror","error","askQuestion","prompt","fetch","method","headers","body","JSON","stringify","response","ok","json","data","parsedData","bot","res","split","str","text","className","onClick","prevState","Card","Body","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4RAQMA,EAAM,IADVC,OAAOC,mBAAqBD,OAAOE,yBAGrCH,EAAII,YAAa,EACjBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QAqHIC,MAnHf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,KAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAImBN,mBAAS,mBAJ5B,mBAIPO,EAJO,KAIIC,EAJJ,OAKYC,+BAAjBC,EALK,EAKLA,MAAMC,EALD,EAKCA,OAGRC,EAAY,uCAAG,sBAAAC,EAAA,0DACfZ,EADe,gBAEjBT,EAAIsB,QACJtB,EAAIuB,MAAQ,WACVvB,EAAIsB,SAENN,EAAc,kBACdF,EAAa,iBACbK,IARiB,8BAUjBnB,EAAIwB,OACJxB,EAAIuB,MAAQ,aAGZP,EAAc,mBAdG,UAeXS,IAfW,QAiBnBzB,EAAI0B,QAAU,aAGd1B,EAAI2B,SAAW,SAAAC,GACb,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SACjCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IACRC,QAAQC,IAAIR,GACZjB,EAAQiB,GACR7B,EAAIsC,QAAU,SAAAV,GACZQ,QAAQC,IAAIT,EAAMW,SA5BH,4CAAH,qDARL,SA6DEC,EA7DF,8EA6Db,WAA2BC,GAA3B,mBAAApB,EAAA,sEACuBqB,MAAM,mCAAoC,CAC/DC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBN,OAAQA,MAPd,YACMO,EADN,QAUUC,GAVV,iCAWiBD,EAASE,OAX1B,cAWIC,EAXJ,OAYIC,EAAaD,EAAKE,IACxBjB,QAAQC,IAAIe,GAbV,kBAcKA,GAdL,iCAiBK,uCAjBL,6CA7Da,sBAgFb,IAAM3B,EAAc,uCAAG,4BAAAJ,EAAA,sEAELmB,EAAY7B,GAFP,OAEf2C,EAFe,OAGrBxC,EAAawC,EAAIC,MAAM,MAAMtB,KAAI,SAAAuB,GAAG,OAAI,2BAAIA,OAC5CtC,EAAM,CAAEuC,KAAMH,IACd1C,EAAQ,IALa,2CAAH,qDAQpB,OACE,oCACE,4DACA,yBAAK8C,UAAU,aACb,yBAAKA,UAAU,OACb,qCACA,4BAAQC,QAAO,sBAAE,sBAAAtC,EAAA,6DACfX,GAAe,SAAAkD,GAAS,OAAKA,KADd,SAEVxC,IAFU,4CAIdL,GAEH,2BAAIJ,IAEN,yBAAK+C,UAAU,OACb,mDACA,kBAACG,EAAA,EAAD,KACJ,kBAACA,EAAA,EAAKC,KAAN,KACGjD,QC5GWkD,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLH,QAAQG,MAAMA,EAAMwC,c","file":"static/js/main.089a98d7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport axios from 'axios'\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\nfunction App() {\r\n  const [isListening, setIsListening] = useState(false)\r\n  const [note, setNote] = useState(\" \")\r\n  const [savedNote, setSavedNote] = useState(\"\")\r\n  const[buttonText,setButtonText]=useState(\"Start Recording\")\r\n  const { speak,cancel } = useSpeechSynthesis();\r\n\r\n\r\n  const handleListen = async() => {\r\n    if (isListening) {\r\n      mic.start()\r\n      mic.onend = () => {\r\n        mic.start()\r\n      }\r\n      setButtonText(\"Stop Recording\")\r\n      setSavedNote(\"Processing...\")\r\n      cancel()\r\n    } else {\r\n      mic.stop()\r\n      mic.onend = () => {\r\n\r\n      }\r\n      setButtonText(\"Start Recording\")\r\n      await handleSaveNote()\r\n    }\r\n    mic.onstart = () => {\r\n    }\r\n\r\n    mic.onresult = event => {\r\n      const transcript = Array.from(event.results)\r\n        .map(result => result[0])\r\n        .map(result => result.transcript)\r\n        .join('')\r\n      console.log(transcript)\r\n      setNote(transcript)\r\n      mic.onerror = event => {\r\n        console.log(event.error)\r\n      }\r\n    }\r\n  }\r\n  // async function askQuestion(prompt)\r\n  // {\r\n  //   // Call Backend OpenAI Apis for completion \r\n  //   var responseAns=\"\";\r\n  //   await axios.post('http://localhost:8080/completion',{\r\n  //     prompt:prompt\r\n  //   })\r\n  //   .then(async (response)=>{\r\n  //     if(response.status==200){\r\n  //       const parsedData = await response.data.bot\r\n  //       // console.log(parsedData)\r\n  //       responseAns= parsedData;\r\n  //       return responseAns\r\n  //       }\r\n  //       else{\r\n  //       responseAns= \"Error: API call failed. Try again..\"\r\n  //       return responseAns\r\n  //       }\r\n  //   })\r\n  //   return \"\"\r\n  // }\r\n  async function askQuestion(prompt){\r\n  const response = await fetch('http://localhost:8080/completion', {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n        prompt: prompt\r\n    })\r\n})\r\nif(response.ok){\r\nconst data = await response.json();\r\nconst parsedData = data.bot\r\nconsole.log(parsedData)\r\nreturn parsedData;\r\n}\r\nelse\r\nreturn \"Error: API call failed. Try again..\"\r\n}\r\n  const handleSaveNote = async() => {\r\n    // Call OpenAI Apis using note\r\n    const res=await askQuestion(note)\r\n    setSavedNote(res.split('\\n').map(str => <p>{str}</p>));\r\n    speak({ text: res })\r\n    setNote('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Speech to text GPT-3 enabled</h1>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <h2>Input</h2>\r\n          <button onClick={async () => {\r\n            setIsListening(prevState => !prevState)\r\n           await handleListen()\r\n          }}>\r\n            {buttonText}\r\n          </button>\r\n          <p>{note}</p>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>Response from GPT-3</h2>\r\n          <Card>\r\n      <Card.Body>\r\n        {savedNote}\r\n      </Card.Body>\r\n    </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}